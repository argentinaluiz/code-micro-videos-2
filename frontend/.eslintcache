[{"/var/www/frontend/src/index.tsx":"1","/var/www/frontend/src/reportWebVitals.ts":"2","/var/www/frontend/src/App.tsx":"3","/var/www/frontend/src/components/Navbar/index.tsx":"4","/var/www/frontend/src/components/Navbar/Menu.tsx":"5","/var/www/frontend/src/components/Page.tsx":"6","/var/www/frontend/src/routes/AppRouter.tsx":"7","/var/www/frontend/src/routes/index.tsx":"8","/var/www/frontend/src/pages/Dashboard.tsx":"9","/var/www/frontend/src/components/Breadcrumbs.tsx":"10","/var/www/frontend/src/pages/category/PageList.tsx":"11","/var/www/frontend/src/pages/category/Table.tsx":"12","/var/www/frontend/src/util/http/index.ts":"13","/var/www/frontend/src/pages/genre/PageList.tsx":"14","/var/www/frontend/src/pages/genre/Table.tsx":"15","/var/www/frontend/src/pages/cast-member/PageList.tsx":"16","/var/www/frontend/src/pages/cast-member/Table.tsx":"17","/var/www/frontend/src/util/http/category-http.ts":"18","/var/www/frontend/src/util/http/http-resource.ts":"19","/var/www/frontend/src/pages/category/PageForm.tsx":"20","/var/www/frontend/src/pages/category/Form.tsx":"21","/var/www/frontend/src/pages/genre/PageForm.tsx":"22","/var/www/frontend/src/pages/genre/Form.tsx":"23","/var/www/frontend/src/util/http/genre-http.ts":"24","/var/www/frontend/src/pages/cast-member/PageForm.tsx":"25","/var/www/frontend/src/pages/cast-member/Form.tsx":"26","/var/www/frontend/src/util/http/cast-member-http.ts":"27","/var/www/frontend/src/theme.ts":"28","/var/www/frontend/src/components/Badge.tsx":"29","/var/www/frontend/src/util/vendor/yup.ts":"30","/var/www/frontend/src/components/SnackbarProvider.tsx":"31","/var/www/frontend/src/components/SubmitActions.tsx":"32","/var/www/frontend/src/components/DefaultForm.tsx":"33","/var/www/frontend/src/components/Table/index.tsx":"34"},{"size":500,"mtime":1608299870744,"results":"35","hashOfConfig":"36"},{"size":425,"mtime":1608299870744,"results":"37","hashOfConfig":"36"},{"size":921,"mtime":1613671900982,"results":"38","hashOfConfig":"36"},{"size":959,"mtime":1608323720178,"results":"39","hashOfConfig":"36"},{"size":1908,"mtime":1609186243854,"results":"40","hashOfConfig":"36"},{"size":658,"mtime":1608649921596,"results":"41","hashOfConfig":"36"},{"size":586,"mtime":1608584662648,"results":"42","hashOfConfig":"36"},{"size":2216,"mtime":1613673166275,"results":"43","hashOfConfig":"36"},{"size":252,"mtime":1608584424896,"results":"44","hashOfConfig":"36"},{"size":2369,"mtime":1609188477515,"results":"45","hashOfConfig":"36"},{"size":690,"mtime":1609186429182,"results":"46","hashOfConfig":"36"},{"size":3119,"mtime":1614614536818,"results":"47","hashOfConfig":"36"},{"size":125,"mtime":1608670477581,"results":"48","hashOfConfig":"36"},{"size":673,"mtime":1609186432222,"results":"49","hashOfConfig":"36"},{"size":3396,"mtime":1614615006414,"results":"50","hashOfConfig":"36"},{"size":706,"mtime":1609186424574,"results":"51","hashOfConfig":"36"},{"size":3148,"mtime":1614614933795,"results":"52","hashOfConfig":"36"},{"size":172,"mtime":1608734635707,"results":"53","hashOfConfig":"36"},{"size":890,"mtime":1614609910431,"results":"54","hashOfConfig":"36"},{"size":400,"mtime":1613135072794,"results":"55","hashOfConfig":"36"},{"size":5387,"mtime":1614600901366,"results":"56","hashOfConfig":"36"},{"size":297,"mtime":1608754415311,"results":"57","hashOfConfig":"36"},{"size":6862,"mtime":1614601223176,"results":"58","hashOfConfig":"36"},{"size":162,"mtime":1608753416408,"results":"59","hashOfConfig":"36"},{"size":307,"mtime":1608754759253,"results":"60","hashOfConfig":"36"},{"size":5489,"mtime":1614601202156,"results":"61","hashOfConfig":"36"},{"size":178,"mtime":1608754723801,"results":"62","hashOfConfig":"36"},{"size":3354,"mtime":1609188617658,"results":"63","hashOfConfig":"36"},{"size":636,"mtime":1609187948724,"results":"64","hashOfConfig":"36"},{"size":394,"mtime":1614189140404,"results":"65","hashOfConfig":"36"},{"size":1453,"mtime":1613672722805,"results":"66","hashOfConfig":"36"},{"size":997,"mtime":1614364152842,"results":"67","hashOfConfig":"36"},{"size":830,"mtime":1614601814792,"results":"68","hashOfConfig":"36"},{"size":3384,"mtime":1614614352612,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"105ko5q",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"72"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"72"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"72"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"72"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"72"},"/var/www/frontend/src/index.tsx",[],["145","146"],"/var/www/frontend/src/reportWebVitals.ts",[],"/var/www/frontend/src/App.tsx",[],"/var/www/frontend/src/components/Navbar/index.tsx",[],"/var/www/frontend/src/components/Navbar/Menu.tsx",[],"/var/www/frontend/src/components/Page.tsx",[],"/var/www/frontend/src/routes/AppRouter.tsx",[],"/var/www/frontend/src/routes/index.tsx",[],"/var/www/frontend/src/pages/Dashboard.tsx",[],"/var/www/frontend/src/components/Breadcrumbs.tsx",[],"/var/www/frontend/src/pages/category/PageList.tsx",[],"/var/www/frontend/src/pages/category/Table.tsx",["147"],"import * as React from 'react';\nimport format from 'date-fns/format'\nimport parseISO from 'date-fns/parseISO'\nimport categoryHttp from '../../util/http/category-http';\nimport { BadgeNo, BadgeYes } from '../../components/Badge';\nimport { Category, ListResponse } from '../../util/models';\nimport DefaultTable, {makeActionStyles ,TableColumn} from '../../components/Table'\nimport { useSnackbar } from 'notistack';\nimport { IconButton, MuiThemeProvider } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport EditIcon from '@material-ui/icons/Edit'\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: 'id',\n        label: 'ID',\n        width: '30%',\n        options: {\n            sort: false\n        }\n    },\n    {\n        name: \"name\",\n        label: \"Nome\",\n        width: \"43%\"\n    },\n    {\n        name: \"is_active\",\n        label: \"Ativo?\",\n        options: {\n            customBodyRender(value, tableMeta, updateValue){\n                return value ? <BadgeYes/> : <BadgeNo/>\n            }\n        },\n        width: '4%'\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        width: '10%',\n        options: {\n            customBodyRender(value, tableMeta, updateValue){\n                return <span>{format(parseISO(value), 'dd/MM/yyyy')}</span>\n            }\n        }\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            sort: false,\n            customBodyRender: (value, tableMeta) => {\n                return (\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/categories/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <EditIcon/>\n                    </IconButton>\n                )\n            }\n        }\n    }\n]\n\nconst Table = () => {\n    const snackbar = useSnackbar()\n    const [data, setData] = React.useState<Category[]>([])\n    const [loading, setLoading] = React.useState<boolean>(false)\n    React.useEffect(() => {\n        let isSubscribed = true;\n        (async () => {\n            setLoading(true)\n            try{\n                const {data} = await categoryHttp.list<ListResponse<Category>>()\n                if(isSubscribed){\n                    setData(data.data)\n                }\n\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            } finally {\n                setLoading(false)\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n            //executado quando componente estiver desmontado\n        }\n    }, [])\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DefaultTable title=\"Listagem de categorias\" columns={columnsDefinition} data={data} loading={loading} options={{responsive: 'vertical'}}/>\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table\n","/var/www/frontend/src/util/http/index.ts",[],"/var/www/frontend/src/pages/genre/PageList.tsx",[],"/var/www/frontend/src/pages/genre/Table.tsx",["148"],"/var/www/frontend/src/pages/cast-member/PageList.tsx",[],"/var/www/frontend/src/pages/cast-member/Table.tsx",["149"],"/var/www/frontend/src/util/http/category-http.ts",[],"/var/www/frontend/src/util/http/http-resource.ts",[],"/var/www/frontend/src/pages/category/PageForm.tsx",[],"/var/www/frontend/src/pages/category/Form.tsx",["150"],"import { Checkbox, FormControlLabel, TextField } from '@material-ui/core';\nimport * as React from 'react';\nimport categoryHttp from '../../util/http/category-http';\nimport * as yup from '../../util/vendor/yup'\nimport { useForm } from \"react-hook-form\"\nimport { useHistory, useParams } from 'react-router';\nimport { useSnackbar } from 'notistack';\nimport { Category } from '../../util/models';\nimport SubmitActions from '../../components/SubmitActions';\nimport { DefaultForm } from '../../components/DefaultForm';\n\nconst useYupValidationResolver = validationSchema =>\n  React.useCallback(\n    async data => {\n      try {\n        const values = await validationSchema.validate(data, {\n          abortEarly: false\n        });\n\n        return {\n          values,\n          errors: {}\n        };\n      } catch (errors) {\n        return {\n          values: {},\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? \"validation\",\n                message: currentError.message\n              }\n            }),\n            {}\n          )\n        };\n      }\n    },\n    [validationSchema]\n  );\n\nexport const Form = () => {\n    const validationSchema = React.useMemo(\n        () =>\n          yup.object({\n            name: yup.string().label('Nome').required().max(255),\n          }),\n        []\n    );\n    const resolver = useYupValidationResolver(validationSchema);\n    const {register, handleSubmit, getValues, setValue, trigger, errors, reset, watch} = useForm<{name: string, is_active: boolean}>({resolver, defaultValues: {is_active: true}})\n\n    const snackbar = useSnackbar();\n    const history = useHistory()\n    const {id} = useParams<{id:string}>()\n    const [category, setCategory] = React.useState<Category | null>(null)\n    const [loading, setLoading] = React.useState<boolean>(false)\n\n    React.useEffect(() => {\n        register({name: \"is_active\"})\n    }, [register])\n\n    React.useEffect(() => {\n        let isSubscribed = true;\n        if(!id){\n            return\n        }\n        (async function getCategory(){\n            setLoading(true)\n            try{\n                const {data} = await categoryHttp.get(id)\n                if(isSubscribed){\n                    setCategory(data.data)\n                    reset(data.data)\n                }\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            } finally {\n                setLoading(false)\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n        }\n    }, [])\n\n    async function onSubmit(formData, event){\n        setLoading(true)\n        try {\n            const http = !category\n                ? categoryHttp.create(formData)\n                : categoryHttp.update(category.id, formData)\n                const {data} = await http\n                snackbar.enqueueSnackbar(\n                    'Categoria salva com sucesso',\n                    {variant: 'success'}\n                )\n                setTimeout(() => {\n                    event ? (\n                        id\n                            ? history.replace(`/categories/${data.data.id}/edit`)\n                            : history.push(`/categories/${data.data.id}/edit`)\n                    ) : history.push('/categories')\n                })\n        } catch(error) {\n            console.log(error)\n            snackbar.enqueueSnackbar(\n                'Erro ao salvar categoria',\n                {variant: 'error'}\n            )\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)} GridItemProps={{ xs: 12, md: 6 }}>\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={'outlined'}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name.message}\n                InputLabelProps={{ shrink:true }}\n            />\n\n            <TextField\n                name=\"description\"\n                label=\"Descrição\"\n                multiline\n                rows=\"4\"\n                fullWidth\n                variant={'outlined'}\n                margin={'normal'}\n                inputRef={register}\n                disabled={loading}\n                InputLabelProps={{ shrink:true }}\n            />\n            <FormControlLabel\n            disabled={loading}\n            control={\n                <Checkbox\n                    name=\"is_active\"\n                    color={\"primary\"}\n                    onChange={\n                        () => setValue('is_active', !getValues()['is_active'])\n                    }\n                    checked={watch('is_active')}\n                    disabled={loading}\n                />\n            }\n            label={'Ativo?'}\n            labelPlacement={'end'}\n            />\n            <SubmitActions disabledButtons={loading} handleSave={() => trigger().then(isValid => {\n                isValid && onSubmit(getValues(), null)\n            })}/>\n        </DefaultForm>\n    );\n};\n","/var/www/frontend/src/pages/genre/PageForm.tsx",[],"/var/www/frontend/src/pages/genre/Form.tsx",["151"],"// @flow\nimport { Checkbox, MenuItem, TextField } from '@material-ui/core';\nimport * as React from 'react';\nimport { NestedValue, useForm } from 'react-hook-form';\nimport categoryHttp from '../../util/http/category-http';\nimport * as yup from '../../util/vendor/yup'\nimport genreHttp from '../../util/http/genre-http';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useSnackbar } from 'notistack';\nimport { Category, Genre } from '../../util/models';\nimport SubmitActions from '../../components/SubmitActions';\nimport { DefaultForm } from '../../components/DefaultForm';\n\nconst useYupValidationResolver = validationSchema =>\n  React.useCallback(\n    async data => {\n      try {\n        const values = await validationSchema.validate(data, {\n          abortEarly: false\n        });\n\n        return {\n          values,\n          errors: {}\n        };\n      } catch (errors) {\n        return {\n          values: {},\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? \"validation\",\n                message: currentError.message\n              }\n            }),\n            {}\n          )\n        };\n      }\n    },\n    [validationSchema]\n  );\n\nexport const Form = () => {\n    const validationSchema = React.useMemo(\n        () =>\n          yup.object({\n            name: yup.string().label('Nome').required().max(255),\n            categories_id: yup.array().label('Categorias').required().min(1)\n          }),\n        []\n    );\n    const resolver = useYupValidationResolver(validationSchema);\n    const {register, handleSubmit, getValues, setValue, trigger, errors, reset, watch} = useForm<{name: string, categories_id: NestedValue<string[]>}>({resolver,\n        defaultValues: {\n            categories_id: []\n        }\n    })\n\n    const snackbar = useSnackbar();\n    const history = useHistory()\n    const {id} = useParams<{id:string}>()\n    const [genre, setGenre] = React.useState<Genre | null>(null)\n    const [categories, setCategories] = React.useState<Category[]>([])\n    const [loading, setLoading] = React.useState<boolean>(false)\n\n    React.useEffect(() => {\n        register({name: \"categories_id\"})\n    }, [register])\n\n    React.useEffect(() => {\n        let isSubscribed = true;\n        (async function loadData(){\n            setLoading(true)\n            const promises = [categoryHttp.list()]\n            if(id){\n                promises.push(genreHttp.get(id))\n            }\n            try{\n                const [categoriesResponse, genreResponse] = await Promise.all(promises)\n                if(isSubscribed){\n                    setCategories(categoriesResponse.data.data)\n                    if(id){\n                        setGenre(genreResponse.data.data)\n                        const categories_id = genreResponse.data.data.categories.map(category => category.id)\n                        reset({\n                            ...genreResponse.data.data,\n                            categories_id\n                        })\n                    }\n                }\n\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            } finally {\n                setLoading(false)\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n        }\n    }, [])\n\n    async function onSubmit(formData, event){\n        setLoading(true)\n        try {\n            const http = !genre\n                ? genreHttp.create(formData)\n                : genreHttp.update(genre.id, formData)\n                const {data} = await http\n                snackbar.enqueueSnackbar(\n                    'Gênero salvo com sucesso',\n                    {variant: 'success'}\n                )\n                setTimeout(() => {\n                    event ? (\n                        id\n                            ? history.replace(`/genres/${data.data.id}/edit`)\n                            : history.push(`/genres/${data.data.id}/edit`)\n                    ) : history.push('/genres')\n                })\n        } catch(error) {\n            console.log(error)\n            snackbar.enqueueSnackbar(\n                'Erro ao salvar Gênero',\n                {variant: 'error'}\n            )\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)} GridItemProps={{ xs: 12, md: 6 }}>\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={'outlined'}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name.message}\n                InputLabelProps={{ shrink:true }}\n            />\n            <TextField\n                name=\"description\"\n                label=\"Descrição\"\n                multiline\n                rows=\"4\"\n                fullWidth\n                variant={'outlined'}\n                margin={'normal'}\n                inputRef={register}\n                disabled={loading}\n                InputLabelProps={{ shrink:true }}\n            />\n            <TextField\n                select\n                name=\"categories_id\"\n                value={watch('categories_id')}\n                label=\"Categories\"\n                margin={'normal'}\n                variant={'outlined'}\n                fullWidth\n                onChange={(e) => {\n                    setValue('categories_id', e.target.value)\n                }}\n                SelectProps={{\n                    multiple: true\n                }}\n                disabled={loading}\n                error={errors.categories_id !== undefined}\n                helperText={errors.categories_id && errors.categories_id.message}\n                InputLabelProps={{ shrink: true }}\n            >\n                <MenuItem value=\"\" disabled>\n                    <em>Selecione categorias</em>\n                </MenuItem>\n                {\n                    categories.map(\n                        (category, key) => (\n                            <MenuItem key={key} value={category.id}>{category.name}</MenuItem>\n                        )\n                    )\n                }\n            </TextField>\n            <Checkbox\n                name=\"is_active\"\n                inputRef={register}\n                defaultChecked\n            />\n            Ativo?\n            <SubmitActions disabledButtons={loading} handleSave={() => trigger().then(isValid => {\n                 isValid && onSubmit(getValues(), null)\n            })}/>\n        </DefaultForm>\n    );\n};\n","/var/www/frontend/src/util/http/genre-http.ts",[],"/var/www/frontend/src/pages/cast-member/PageForm.tsx",[],"/var/www/frontend/src/pages/cast-member/Form.tsx",["152"],"import { FormControl, FormControlLabel, FormHelperText, FormLabel, Radio, RadioGroup, TextField } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { DefaultForm } from '../../components/DefaultForm';\nimport SubmitActions from '../../components/SubmitActions';\nimport castMemberHttp from '../../util/http/cast-member-http';\nimport { CastMember } from '../../util/models';\nimport * as yup from '../../util/vendor/yup'\n\nconst useYupValidationResolver = validationSchema =>\n  React.useCallback(\n    async data => {\n      try {\n        const values = await validationSchema.validate(data, {\n          abortEarly: false\n        });\n\n        return {\n          values,\n          errors: {}\n        };\n      } catch (errors) {\n        return {\n          values: {},\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? \"validation\",\n                message: currentError.message\n              }\n            }),\n            {}\n          )\n        };\n      }\n    },\n    [validationSchema]\n  );\n\nexport const Form = () => {\n    const validationSchema = React.useMemo(\n        () =>\n          yup.object({\n            name: yup.string().label('Nome').required().max(255),\n            type: yup.number().label('Tipo').required()\n          }),\n        []\n    );\n    const resolver = useYupValidationResolver(validationSchema);\n    const {register, handleSubmit, getValues, setValue, trigger, errors, reset, watch} = useForm<{name: string, type: string}>({resolver})\n\n    const snackbar = useSnackbar();\n    const history = useHistory()\n    const {id} = useParams<{id:string}>()\n    const [castMember, setCastMember] = React.useState<CastMember | null>(null)\n    const [loading, setLoading] = React.useState<boolean>(false)\n\n    React.useEffect(() => {\n        register({name: \"type\"})\n    }, [register])\n\n    React.useEffect(() => {\n        let isSubscribed = true;\n        if(!id){\n            return\n        }\n        (async function getCastMember(){\n            setLoading(true)\n            try{\n                const {data} = await castMemberHttp.get(id)\n                if(isSubscribed){\n                    setCastMember(data.data)\n                    reset(data.data)\n                }\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            } finally {\n                setLoading(false)\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n        }\n    }, [])\n\n    async function onSubmit(formData, event){\n        setLoading(true)\n        try {\n            const http = !castMember\n                ? castMemberHttp.create(formData)\n                : castMemberHttp.update(castMember.id, formData)\n                const {data} = await http\n                snackbar.enqueueSnackbar(\n                    'Membro de Elenco salvo com sucesso',\n                    {variant: 'success'}\n                )\n                setTimeout(() => {\n                    event ? (\n                        id\n                            ? history.replace(`/cast-members/${data.data.id}/edit`)\n                            : history.push(`/cast-members/${data.data.id}/edit`)\n                    ) : history.push('/cast-members')\n                })\n        } catch(error) {\n            console.log(error)\n            snackbar.enqueueSnackbar(\n                'Erro ao salvar Membro de Elenco',\n                {variant: 'error'}\n            )\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)} GridItemProps={{ xs: 12, md: 6 }}>\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={'outlined'}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name.message}\n                InputLabelProps={{ shrink: true }}\n            />\n            <FormControl\n                margin={\"normal\"}\n                error={errors.type !== undefined}\n                disabled={loading}\n            >\n                <FormLabel component=\"legend\">Tipo</FormLabel>\n                <RadioGroup\n                    name=\"type\"\n                    onChange={(e) => {\n                        setValue('type', parseInt(e.target.value))\n                    }}\n                    value={watch('type') + \"\"}\n                >\n                    <FormControlLabel value=\"1\" control={<Radio color={\"primary\"}/>} label=\"Diretor\"/>\n                    <FormControlLabel value=\"2\" control={<Radio color={\"primary\"}/>} label=\"Ator\"/>\n                </RadioGroup>\n                {\n                    errors.type && <FormHelperText id=\"type-helper-text\">{errors.type.message}</FormHelperText>\n                }\n            </FormControl>\n            <SubmitActions disabledButtons={loading} handleSave={() => trigger().then(isValid => {\n                 isValid && onSubmit(getValues(), null)\n            })}/>\n        </DefaultForm>\n    );\n};\n","/var/www/frontend/src/util/http/cast-member-http.ts",[],"/var/www/frontend/src/theme.ts",[],"/var/www/frontend/src/components/Badge.tsx",[],"/var/www/frontend/src/util/vendor/yup.ts",["153","154","155","156"],"import { setLocale } from 'yup'\n\nconst ptBR = {\n    mixed: {\n        required: '${path} é requerido'\n    },\n    string: {\n        max: '${path} precisa ter no máximo ${max} caracteres'\n    },\n    number: {\n        min: '${path} precisa ser no mínimo ${min}'\n    },\n    array: {\n        min: 'Em ${path}, precisa escolher pelo menos ${min} item'\n    }\n}\n\nsetLocale(ptBR)\n\nexport * from 'yup'\n","/var/www/frontend/src/components/SnackbarProvider.tsx",[],"/var/www/frontend/src/components/SubmitActions.tsx",[],"/var/www/frontend/src/components/DefaultForm.tsx",[],"/var/www/frontend/src/components/Table/index.tsx",["157"],"import MuiDataTable, { MUIDataTableColumn, MUIDataTableOptions, MUIDataTableProps } from 'mui-datatables';\nimport * as React from 'react';\nimport {merge, omit, cloneDeep} from 'lodash'\nimport { MuiThemeProvider, Theme, useMediaQuery, useTheme } from '@material-ui/core';\n\nexport interface TableColumn extends MUIDataTableColumn{\n    width?: string\n}\n\nconst defaultOptions: MUIDataTableOptions = {\n    print: false,\n    download: false,\n    textLabels: {\n        body: {\n            noMatch: \"Nenhum registro encontrado\",\n            toolTip: \"Classificar\"\n        },\n        pagination: {\n            next: \"Próxima página\",\n            previous: \"Página anterior\",\n            rowsPerPage: \"Por página:\",\n            displayRows: \"de\"\n        },\n        toolbar: {\n            search: \"Busca\",\n            downloadCsv: \"Download CSV\",\n            print: \"Imprimir\",\n            viewColumns: \"Ver Colunas\",\n            filterTable: \"Filtrar Tabelas\"\n        },\n        filter: {\n            all: \"Todos\",\n            title: \"FILTROS\",\n            reset: \"LIMPAR\"\n        },\n        viewColumns: {\n            title: \"Ver Colunas\",\n            titleAria: \"Ver/Esconder Colunas da Tabela\"\n        },\n        selectedRows: {\n            text: \"registro(s) selecionados\",\n            delete: \"Excluir\",\n            deleteAria: \"Excluir registros selecionados\"\n        }\n    }\n}\n\nexport interface TableProps extends MUIDataTableProps{\n    columns: TableColumn[]\n    loading?: boolean\n}\n\nconst Table: React.FC<TableProps> = (props) => {\n    function extractMuiDataTableColumns(columns: TableColumn[]): MUIDataTableColumn[]{\n        setColumnsWith(columns)\n        return columns.map(column => omit(column, 'width'))\n    }\n\n    function setColumnsWith(columns: TableColumn[]){\n        columns.forEach((column, key) => {\n            if(column.width){\n                const overrides = theme.overrides as any;\n                overrides.MUIDataTableHeadCell.fixedHeader[`&:nth-child(${key + 2})`] = {\n                    width: column.width\n                }\n            }\n        })\n    }\n\n    function applyLoading(){\n        const textLabels = (newProps.options as any).textLabels\n        textLabels.body.noMatch = newProps.loading === true ? 'Carregando...' : textLabels.body.noMatch\n    }\n\n    function applyResponsive(){\n        newProps.options.responsive = isSmOrDown ? 'simple' : 'vertical'\n    }\n\n    function getOriginalMuiDataTableProps(){\n        omit(newProps, 'loading')\n    }\n\n    const theme = cloneDeep<Theme>(useTheme())\n    const isSmOrDown = useMediaQuery(theme.breakpoints.down('sm'))\n    const newProps = merge(\n        {options: cloneDeep(defaultOptions)},\n        props,\n        {columns: extractMuiDataTableColumns(props.columns)}\n    )\n\n    applyLoading()\n    applyResponsive()\n\n    const originalProps = getOriginalMuiDataTableProps()\n\n    return (\n        <MuiThemeProvider theme={theme}>\n            <MuiDataTable {...newProps}/>\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table\n\nexport function makeActionStyles(column){\n    return theme => {\n        const copyTheme = cloneDeep(theme)\n        const selector = `&[data-testid^=\"MuiDataTableBodyCell-${column}\"]`;\n        (copyTheme.overrides as any).MuiDataTableBodyCell.root[selector] = {\n            paddingTop: '0px',\n            passingBottom: '0px'\n        }\n        return copyTheme\n    }\n\n}\n",{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":97,"column":8,"nodeType":"164","endLine":97,"endColumn":10,"suggestions":"165"},{"ruleId":"162","severity":1,"message":"163","line":106,"column":8,"nodeType":"164","endLine":106,"endColumn":10,"suggestions":"166"},{"ruleId":"162","severity":1,"message":"163","line":101,"column":8,"nodeType":"164","endLine":101,"endColumn":10,"suggestions":"167"},{"ruleId":"162","severity":1,"message":"168","line":91,"column":8,"nodeType":"164","endLine":91,"endColumn":10,"suggestions":"169"},{"ruleId":"162","severity":1,"message":"168","line":108,"column":8,"nodeType":"164","endLine":108,"endColumn":10,"suggestions":"170"},{"ruleId":"162","severity":1,"message":"168","line":92,"column":8,"nodeType":"164","endLine":92,"endColumn":10,"suggestions":"171"},{"ruleId":"172","severity":1,"message":"173","line":5,"column":19,"nodeType":"174","messageId":"175","endLine":5,"endColumn":40},{"ruleId":"172","severity":1,"message":"173","line":8,"column":14,"nodeType":"174","messageId":"175","endLine":8,"endColumn":63},{"ruleId":"172","severity":1,"message":"173","line":11,"column":14,"nodeType":"174","messageId":"175","endLine":11,"endColumn":52},{"ruleId":"172","severity":1,"message":"173","line":14,"column":14,"nodeType":"174","messageId":"175","endLine":14,"endColumn":67},{"ruleId":"176","severity":1,"message":"177","line":94,"column":11,"nodeType":"178","messageId":"179","endLine":94,"endColumn":24},"no-native-reassign",["180"],"no-negated-in-lhs",["181"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'snackbar'. Either include it or remove the dependency array.","ArrayExpression",["182"],["183"],["184"],"React Hook React.useEffect has missing dependencies: 'id', 'reset', and 'snackbar'. Either include them or remove the dependency array.",["185"],["186"],["187"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","@typescript-eslint/no-unused-vars","'originalProps' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"188","fix":"189"},{"desc":"188","fix":"190"},{"desc":"188","fix":"191"},{"desc":"192","fix":"193"},{"desc":"192","fix":"194"},{"desc":"192","fix":"195"},"Update the dependencies array to be: [snackbar]",{"range":"196","text":"197"},{"range":"198","text":"197"},{"range":"199","text":"197"},"Update the dependencies array to be: [id, reset, snackbar]",{"range":"200","text":"201"},{"range":"202","text":"201"},{"range":"203","text":"201"},[2802,2804],"[snackbar]",[3080,3082],[2834,2836],[2781,2783],"[id, reset, snackbar]",[3532,3534],[2865,2867]]