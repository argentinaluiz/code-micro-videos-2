[{"/var/www/frontend/src/index.tsx":"1","/var/www/frontend/src/reportWebVitals.ts":"2","/var/www/frontend/src/App.tsx":"3","/var/www/frontend/src/components/Navbar/index.tsx":"4","/var/www/frontend/src/components/Navbar/Menu.tsx":"5","/var/www/frontend/src/components/Page.tsx":"6","/var/www/frontend/src/routes/AppRouter.tsx":"7","/var/www/frontend/src/routes/index.tsx":"8","/var/www/frontend/src/pages/Dashboard.tsx":"9","/var/www/frontend/src/components/Breadcrumbs.tsx":"10","/var/www/frontend/src/pages/category/PageList.tsx":"11","/var/www/frontend/src/pages/category/Table.tsx":"12","/var/www/frontend/src/util/http/index.ts":"13","/var/www/frontend/src/pages/genre/PageList.tsx":"14","/var/www/frontend/src/pages/genre/Table.tsx":"15","/var/www/frontend/src/pages/cast-member/PageList.tsx":"16","/var/www/frontend/src/pages/cast-member/Table.tsx":"17","/var/www/frontend/src/util/http/category-http.ts":"18","/var/www/frontend/src/util/http/http-resource.ts":"19","/var/www/frontend/src/pages/category/PageForm.tsx":"20","/var/www/frontend/src/pages/category/Form.tsx":"21","/var/www/frontend/src/pages/genre/PageForm.tsx":"22","/var/www/frontend/src/pages/genre/Form.tsx":"23","/var/www/frontend/src/util/http/genre-http.ts":"24","/var/www/frontend/src/pages/cast-member/PageForm.tsx":"25","/var/www/frontend/src/pages/cast-member/Form.tsx":"26","/var/www/frontend/src/util/http/cast-member-http.ts":"27","/var/www/frontend/src/theme.ts":"28","/var/www/frontend/src/components/Badge.tsx":"29","/var/www/frontend/src/util/vendor/yup.ts":"30","/var/www/frontend/src/components/SnackbarProvider.tsx":"31","/var/www/frontend/src/components/SubmitActions.tsx":"32","/var/www/frontend/src/components/DefaultForm.tsx":"33","/var/www/frontend/src/components/Table/index.tsx":"34","/var/www/frontend/src/components/Table/FilterResetButton.tsx":"35","/var/www/frontend/src/components/Table/DebouncedTableSearch.js":"36","/var/www/frontend/src/store/filter/index.ts":"37","/var/www/frontend/src/hooks/useFilter.ts":"38"},{"size":500,"mtime":1608299870744,"results":"39","hashOfConfig":"40"},{"size":425,"mtime":1608299870744,"results":"41","hashOfConfig":"40"},{"size":921,"mtime":1613671900982,"results":"42","hashOfConfig":"40"},{"size":959,"mtime":1608323720178,"results":"43","hashOfConfig":"40"},{"size":1908,"mtime":1609186243854,"results":"44","hashOfConfig":"40"},{"size":658,"mtime":1608649921596,"results":"45","hashOfConfig":"40"},{"size":586,"mtime":1608584662648,"results":"46","hashOfConfig":"40"},{"size":2216,"mtime":1613673166275,"results":"47","hashOfConfig":"40"},{"size":252,"mtime":1608584424896,"results":"48","hashOfConfig":"40"},{"size":2369,"mtime":1609188477515,"results":"49","hashOfConfig":"40"},{"size":690,"mtime":1609186429182,"results":"50","hashOfConfig":"40"},{"size":5465,"mtime":1614867019460,"results":"51","hashOfConfig":"40"},{"size":125,"mtime":1608670477581,"results":"52","hashOfConfig":"40"},{"size":673,"mtime":1609186432222,"results":"53","hashOfConfig":"40"},{"size":3396,"mtime":1614688660666,"results":"54","hashOfConfig":"40"},{"size":706,"mtime":1609186424574,"results":"55","hashOfConfig":"40"},{"size":3148,"mtime":1614688662522,"results":"56","hashOfConfig":"40"},{"size":172,"mtime":1608734635707,"results":"57","hashOfConfig":"40"},{"size":1340,"mtime":1614791592776,"results":"58","hashOfConfig":"40"},{"size":400,"mtime":1613135072794,"results":"59","hashOfConfig":"40"},{"size":5387,"mtime":1614600901366,"results":"60","hashOfConfig":"40"},{"size":297,"mtime":1608754415311,"results":"61","hashOfConfig":"40"},{"size":6886,"mtime":1614776543979,"results":"62","hashOfConfig":"40"},{"size":162,"mtime":1608753416408,"results":"63","hashOfConfig":"40"},{"size":307,"mtime":1608754759253,"results":"64","hashOfConfig":"40"},{"size":5489,"mtime":1614601202156,"results":"65","hashOfConfig":"40"},{"size":178,"mtime":1608754723801,"results":"66","hashOfConfig":"40"},{"size":3354,"mtime":1609188617658,"results":"67","hashOfConfig":"40"},{"size":636,"mtime":1609187948724,"results":"68","hashOfConfig":"40"},{"size":394,"mtime":1614189140404,"results":"69","hashOfConfig":"40"},{"size":1453,"mtime":1613672722805,"results":"70","hashOfConfig":"40"},{"size":997,"mtime":1614364152842,"results":"71","hashOfConfig":"40"},{"size":830,"mtime":1614601814792,"results":"72","hashOfConfig":"40"},{"size":3984,"mtime":1614797945419,"results":"73","hashOfConfig":"40"},{"size":685,"mtime":1614792553803,"results":"74","hashOfConfig":"40"},{"size":3638,"mtime":1614805752532,"results":"75","hashOfConfig":"40"},{"size":2401,"mtime":1614804405417,"results":"76","hashOfConfig":"40"},{"size":6550,"mtime":1614867557733,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"105ko5q",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"80"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"80"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/var/www/frontend/src/index.tsx",[],["162","163"],"/var/www/frontend/src/reportWebVitals.ts",[],"/var/www/frontend/src/App.tsx",[],"/var/www/frontend/src/components/Navbar/index.tsx",[],"/var/www/frontend/src/components/Navbar/Menu.tsx",[],"/var/www/frontend/src/components/Page.tsx",[],"/var/www/frontend/src/routes/AppRouter.tsx",[],"/var/www/frontend/src/routes/index.tsx",[],"/var/www/frontend/src/pages/Dashboard.tsx",[],"/var/www/frontend/src/components/Breadcrumbs.tsx",[],"/var/www/frontend/src/pages/category/PageList.tsx",[],"/var/www/frontend/src/pages/category/Table.tsx",["164","165"],"/var/www/frontend/src/util/http/index.ts",[],"/var/www/frontend/src/pages/genre/PageList.tsx",[],"/var/www/frontend/src/pages/genre/Table.tsx",["166"],"import { Chip, IconButton, MuiThemeProvider } from '@material-ui/core';\nimport * as React from 'react';\nimport format from 'date-fns/format'\nimport parseISO from 'date-fns/parseISO'\nimport genreHttp from '../../util/http/genre-http';\nimport { Genre, ListResponse } from '../../util/models';\nimport DefaultTable, { makeActionStyles, TableColumn } from '../../components/Table'\nimport { useSnackbar } from 'notistack';\nimport EditIcon from '@material-ui/icons/Edit'\nimport { Link } from 'react-router-dom';\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: 'id',\n        label: 'ID',\n        width: '27%',\n        options: {\n            sort: false\n        }\n    },\n    {\n        name: \"name\",\n        label: \"Nome\",\n        width: '16%',\n    },\n    {\n        name: \"categories\",\n        label: \"Categorias\",\n        options: {\n            customBodyRender(value, tableMeta, updateValue){\n                return value.map((value: any) => value.name).join(\", \")\n            }\n        },\n        width: '30%'\n    },\n    {\n        name: \"is_active\",\n        label: \"Ativo?\",\n        options: {\n            customBodyRender(value, tableMeta, updateValue){\n                return value ? <Chip label=\"Sim\" color=\"primary\"/> : <Chip label=\"Não\" color=\"secondary\"/>\n            }\n        },\n        width: \"4%\"\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        options: {\n            customBodyRender(value, tableMeta, updateValue){\n                return <span>{format(parseISO(value), 'dd/MM/yyyy')}</span>\n            }\n        },\n        width: \"10%\"\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            sort: false,\n            customBodyRender: (value, tableMeta) => {\n                return (\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/categories/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <EditIcon/>\n                    </IconButton>\n                )\n            }\n        }\n    }\n]\n\ntype Props = {};\nconst Table = (props: Props) => {\n    const snackbar = useSnackbar()\n    const [data, setData] = React.useState<Genre[]>([])\n    const [loading, setLoading] = React.useState<boolean>(false)\n    React.useEffect(() => {\n        let isSubscribed = true;\n        (async () => {\n            setLoading(true)\n            try{\n                const {data} = await genreHttp.list<ListResponse<Genre>>()\n                if(isSubscribed){\n                    setData(data.data)\n                }\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            } finally {\n                setLoading(false)\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n            //executado quando componente estiver desmontado\n        }\n    }, [])\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DefaultTable title=\"Listagem de gêneros\" columns={columnsDefinition} data={data} loading={loading} options={{responsive: 'vertical'}}/>\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table\n","/var/www/frontend/src/pages/cast-member/PageList.tsx",[],"/var/www/frontend/src/pages/cast-member/Table.tsx",["167"],"import * as React from 'react';\nimport format from 'date-fns/format'\nimport parseISO from 'date-fns/parseISO'\nimport castMemberHttp from '../../util/http/cast-member-http';\nimport { CastMember, ListResponse } from '../../util/models';\nimport DefaultTable, { makeActionStyles, TableColumn } from '../../components/Table'\nimport { useSnackbar } from 'notistack';\nimport { IconButton, MuiThemeProvider } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport EditIcon from '@material-ui/icons/Edit'\n\nconst CastMemberTypeMap = {\n    1: 'Diretor',\n    2: 'Ator'\n}\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: 'id',\n        label: 'ID',\n        width: '30%',\n        options: {\n            sort: false\n        }\n    },\n    {\n        name: \"name\",\n        label: \"Nome\",\n        width: \"43%\"\n    },\n    {\n        name: \"type\",\n        label: \"Tipo\",\n        options: {\n            customBodyRender(value, tableMeta, updateValue){\n                return CastMemberTypeMap[value]\n            }\n        },\n        width: \"4%\"\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        options: {\n            customBodyRender(value, tableMeta, updateValue){\n                return <span>{format(parseISO(value), 'dd/MM/yyyy')}</span>\n            }\n        },\n        width: '10%',\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            sort: false,\n            customBodyRender: (value, tableMeta) => {\n                return (\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/categories/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <EditIcon/>\n                    </IconButton>\n                )\n            }\n        }\n    }\n]\n\ntype Props = {};\nconst Table = (props: Props) => {\n    const snackbar = useSnackbar()\n    const [data, setData] = React.useState<CastMember[]>([])\n    const [loading, setLoading] = React.useState<boolean>(false)\n    React.useEffect(() => {\n        let isSubscribed = true;\n        (async () => {\n            setLoading(true)\n            try{\n                const {data} = await castMemberHttp.list<ListResponse<CastMember>>()\n                if(isSubscribed){\n                    setData(data.data)\n                }\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            } finally {\n                setLoading(false)\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n            //executado quando componente estiver desmontado\n        }\n    }, [])\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DefaultTable title=\"Listagem de membros\" columns={columnsDefinition} data={data} loading={loading} options={{responsive: 'vertical'}}/>\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table\n","/var/www/frontend/src/util/http/category-http.ts",[],"/var/www/frontend/src/util/http/http-resource.ts",[],"/var/www/frontend/src/pages/category/PageForm.tsx",[],"/var/www/frontend/src/pages/category/Form.tsx",["168"],"import { Checkbox, FormControlLabel, TextField } from '@material-ui/core';\nimport * as React from 'react';\nimport categoryHttp from '../../util/http/category-http';\nimport * as yup from '../../util/vendor/yup'\nimport { useForm } from \"react-hook-form\"\nimport { useHistory, useParams } from 'react-router';\nimport { useSnackbar } from 'notistack';\nimport { Category } from '../../util/models';\nimport SubmitActions from '../../components/SubmitActions';\nimport { DefaultForm } from '../../components/DefaultForm';\n\nconst useYupValidationResolver = validationSchema =>\n  React.useCallback(\n    async data => {\n      try {\n        const values = await validationSchema.validate(data, {\n          abortEarly: false\n        });\n\n        return {\n          values,\n          errors: {}\n        };\n      } catch (errors) {\n        return {\n          values: {},\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? \"validation\",\n                message: currentError.message\n              }\n            }),\n            {}\n          )\n        };\n      }\n    },\n    [validationSchema]\n  );\n\nexport const Form = () => {\n    const validationSchema = React.useMemo(\n        () =>\n          yup.object({\n            name: yup.string().label('Nome').required().max(255),\n          }),\n        []\n    );\n    const resolver = useYupValidationResolver(validationSchema);\n    const {register, handleSubmit, getValues, setValue, trigger, errors, reset, watch} = useForm<{name: string, is_active: boolean}>({resolver, defaultValues: {is_active: true}})\n\n    const snackbar = useSnackbar();\n    const history = useHistory()\n    const {id} = useParams<{id:string}>()\n    const [category, setCategory] = React.useState<Category | null>(null)\n    const [loading, setLoading] = React.useState<boolean>(false)\n\n    React.useEffect(() => {\n        register({name: \"is_active\"})\n    }, [register])\n\n    React.useEffect(() => {\n        let isSubscribed = true;\n        if(!id){\n            return\n        }\n        (async function getCategory(){\n            setLoading(true)\n            try{\n                const {data} = await categoryHttp.get(id)\n                if(isSubscribed){\n                    setCategory(data.data)\n                    reset(data.data)\n                }\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            } finally {\n                setLoading(false)\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n        }\n    }, [])\n\n    async function onSubmit(formData, event){\n        setLoading(true)\n        try {\n            const http = !category\n                ? categoryHttp.create(formData)\n                : categoryHttp.update(category.id, formData)\n                const {data} = await http\n                snackbar.enqueueSnackbar(\n                    'Categoria salva com sucesso',\n                    {variant: 'success'}\n                )\n                setTimeout(() => {\n                    event ? (\n                        id\n                            ? history.replace(`/categories/${data.data.id}/edit`)\n                            : history.push(`/categories/${data.data.id}/edit`)\n                    ) : history.push('/categories')\n                })\n        } catch(error) {\n            console.log(error)\n            snackbar.enqueueSnackbar(\n                'Erro ao salvar categoria',\n                {variant: 'error'}\n            )\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)} GridItemProps={{ xs: 12, md: 6 }}>\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={'outlined'}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name.message}\n                InputLabelProps={{ shrink:true }}\n            />\n\n            <TextField\n                name=\"description\"\n                label=\"Descrição\"\n                multiline\n                rows=\"4\"\n                fullWidth\n                variant={'outlined'}\n                margin={'normal'}\n                inputRef={register}\n                disabled={loading}\n                InputLabelProps={{ shrink:true }}\n            />\n            <FormControlLabel\n            disabled={loading}\n            control={\n                <Checkbox\n                    name=\"is_active\"\n                    color={\"primary\"}\n                    onChange={\n                        () => setValue('is_active', !getValues()['is_active'])\n                    }\n                    checked={watch('is_active')}\n                    disabled={loading}\n                />\n            }\n            label={'Ativo?'}\n            labelPlacement={'end'}\n            />\n            <SubmitActions disabledButtons={loading} handleSave={() => trigger().then(isValid => {\n                isValid && onSubmit(getValues(), null)\n            })}/>\n        </DefaultForm>\n    );\n};\n","/var/www/frontend/src/pages/genre/PageForm.tsx",[],"/var/www/frontend/src/pages/genre/Form.tsx",["169"],"// @flow\nimport { Checkbox, MenuItem, TextField } from '@material-ui/core';\nimport * as React from 'react';\nimport { NestedValue, useForm } from 'react-hook-form';\nimport categoryHttp from '../../util/http/category-http';\nimport * as yup from '../../util/vendor/yup'\nimport genreHttp from '../../util/http/genre-http';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useSnackbar } from 'notistack';\nimport { Category, Genre } from '../../util/models';\nimport SubmitActions from '../../components/SubmitActions';\nimport { DefaultForm } from '../../components/DefaultForm';\n\nconst useYupValidationResolver = validationSchema =>\n  React.useCallback(\n    async data => {\n      try {\n        const values = await validationSchema.validate(data, {\n          abortEarly: false\n        });\n\n        return {\n          values,\n          errors: {}\n        };\n      } catch (errors) {\n        return {\n          values: {},\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? \"validation\",\n                message: currentError.message\n              }\n            }),\n            {}\n          )\n        };\n      }\n    },\n    [validationSchema]\n  );\n\nexport const Form = () => {\n    const validationSchema = React.useMemo(\n        () =>\n          yup.object({\n            name: yup.string().label('Nome').required().max(255),\n            categories_id: yup.array().label('Categorias').required().min(1)\n          }),\n        []\n    );\n    const resolver = useYupValidationResolver(validationSchema);\n    const {register, handleSubmit, getValues, setValue, trigger, errors, reset, watch} = useForm<{name: string, categories_id: NestedValue<string[]>}>({resolver,\n        defaultValues: {\n            categories_id: []\n        }\n    })\n\n    const snackbar = useSnackbar();\n    const history = useHistory()\n    const {id} = useParams<{id:string}>()\n    const [genre, setGenre] = React.useState<Genre | null>(null)\n    const [categories, setCategories] = React.useState<Category[]>([])\n    const [loading, setLoading] = React.useState<boolean>(false)\n\n    React.useEffect(() => {\n        register({name: \"categories_id\"})\n    }, [register])\n\n    React.useEffect(() => {\n        let isSubscribed = true;\n        (async function loadData(){\n            setLoading(true)\n            const promises = [categoryHttp.list({queryParams: {all: ''}})]\n            if(id){\n                promises.push(genreHttp.get(id))\n            }\n            try{\n                const [categoriesResponse, genreResponse] = await Promise.all(promises)\n                if(isSubscribed){\n                    setCategories(categoriesResponse.data.data)\n                    if(id){\n                        setGenre(genreResponse.data.data)\n                        const categories_id = genreResponse.data.data.categories.map(category => category.id)\n                        reset({\n                            ...genreResponse.data.data,\n                            categories_id\n                        })\n                    }\n                }\n\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            } finally {\n                setLoading(false)\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n        }\n    }, [])\n\n    async function onSubmit(formData, event){\n        setLoading(true)\n        try {\n            const http = !genre\n                ? genreHttp.create(formData)\n                : genreHttp.update(genre.id, formData)\n                const {data} = await http\n                snackbar.enqueueSnackbar(\n                    'Gênero salvo com sucesso',\n                    {variant: 'success'}\n                )\n                setTimeout(() => {\n                    event ? (\n                        id\n                            ? history.replace(`/genres/${data.data.id}/edit`)\n                            : history.push(`/genres/${data.data.id}/edit`)\n                    ) : history.push('/genres')\n                })\n        } catch(error) {\n            console.log(error)\n            snackbar.enqueueSnackbar(\n                'Erro ao salvar Gênero',\n                {variant: 'error'}\n            )\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)} GridItemProps={{ xs: 12, md: 6 }}>\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={'outlined'}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name.message}\n                InputLabelProps={{ shrink:true }}\n            />\n            <TextField\n                name=\"description\"\n                label=\"Descrição\"\n                multiline\n                rows=\"4\"\n                fullWidth\n                variant={'outlined'}\n                margin={'normal'}\n                inputRef={register}\n                disabled={loading}\n                InputLabelProps={{ shrink:true }}\n            />\n            <TextField\n                select\n                name=\"categories_id\"\n                value={watch('categories_id')}\n                label=\"Categories\"\n                margin={'normal'}\n                variant={'outlined'}\n                fullWidth\n                onChange={(e) => {\n                    setValue('categories_id', e.target.value)\n                }}\n                SelectProps={{\n                    multiple: true\n                }}\n                disabled={loading}\n                error={errors.categories_id !== undefined}\n                helperText={errors.categories_id && errors.categories_id.message}\n                InputLabelProps={{ shrink: true }}\n            >\n                <MenuItem value=\"\" disabled>\n                    <em>Selecione categorias</em>\n                </MenuItem>\n                {\n                    categories.map(\n                        (category, key) => (\n                            <MenuItem key={key} value={category.id}>{category.name}</MenuItem>\n                        )\n                    )\n                }\n            </TextField>\n            <Checkbox\n                name=\"is_active\"\n                inputRef={register}\n                defaultChecked\n            />\n            Ativo?\n            <SubmitActions disabledButtons={loading} handleSave={() => trigger().then(isValid => {\n                 isValid && onSubmit(getValues(), null)\n            })}/>\n        </DefaultForm>\n    );\n};\n","/var/www/frontend/src/util/http/genre-http.ts",[],"/var/www/frontend/src/pages/cast-member/PageForm.tsx",[],"/var/www/frontend/src/pages/cast-member/Form.tsx",["170"],"import { FormControl, FormControlLabel, FormHelperText, FormLabel, Radio, RadioGroup, TextField } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { DefaultForm } from '../../components/DefaultForm';\nimport SubmitActions from '../../components/SubmitActions';\nimport castMemberHttp from '../../util/http/cast-member-http';\nimport { CastMember } from '../../util/models';\nimport * as yup from '../../util/vendor/yup'\n\nconst useYupValidationResolver = validationSchema =>\n  React.useCallback(\n    async data => {\n      try {\n        const values = await validationSchema.validate(data, {\n          abortEarly: false\n        });\n\n        return {\n          values,\n          errors: {}\n        };\n      } catch (errors) {\n        return {\n          values: {},\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? \"validation\",\n                message: currentError.message\n              }\n            }),\n            {}\n          )\n        };\n      }\n    },\n    [validationSchema]\n  );\n\nexport const Form = () => {\n    const validationSchema = React.useMemo(\n        () =>\n          yup.object({\n            name: yup.string().label('Nome').required().max(255),\n            type: yup.number().label('Tipo').required()\n          }),\n        []\n    );\n    const resolver = useYupValidationResolver(validationSchema);\n    const {register, handleSubmit, getValues, setValue, trigger, errors, reset, watch} = useForm<{name: string, type: string}>({resolver})\n\n    const snackbar = useSnackbar();\n    const history = useHistory()\n    const {id} = useParams<{id:string}>()\n    const [castMember, setCastMember] = React.useState<CastMember | null>(null)\n    const [loading, setLoading] = React.useState<boolean>(false)\n\n    React.useEffect(() => {\n        register({name: \"type\"})\n    }, [register])\n\n    React.useEffect(() => {\n        let isSubscribed = true;\n        if(!id){\n            return\n        }\n        (async function getCastMember(){\n            setLoading(true)\n            try{\n                const {data} = await castMemberHttp.get(id)\n                if(isSubscribed){\n                    setCastMember(data.data)\n                    reset(data.data)\n                }\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            } finally {\n                setLoading(false)\n            }\n        })()\n\n        return () => {\n            isSubscribed = false\n        }\n    }, [])\n\n    async function onSubmit(formData, event){\n        setLoading(true)\n        try {\n            const http = !castMember\n                ? castMemberHttp.create(formData)\n                : castMemberHttp.update(castMember.id, formData)\n                const {data} = await http\n                snackbar.enqueueSnackbar(\n                    'Membro de Elenco salvo com sucesso',\n                    {variant: 'success'}\n                )\n                setTimeout(() => {\n                    event ? (\n                        id\n                            ? history.replace(`/cast-members/${data.data.id}/edit`)\n                            : history.push(`/cast-members/${data.data.id}/edit`)\n                    ) : history.push('/cast-members')\n                })\n        } catch(error) {\n            console.log(error)\n            snackbar.enqueueSnackbar(\n                'Erro ao salvar Membro de Elenco',\n                {variant: 'error'}\n            )\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)} GridItemProps={{ xs: 12, md: 6 }}>\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={'outlined'}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name.message}\n                InputLabelProps={{ shrink: true }}\n            />\n            <FormControl\n                margin={\"normal\"}\n                error={errors.type !== undefined}\n                disabled={loading}\n            >\n                <FormLabel component=\"legend\">Tipo</FormLabel>\n                <RadioGroup\n                    name=\"type\"\n                    onChange={(e) => {\n                        setValue('type', parseInt(e.target.value))\n                    }}\n                    value={watch('type') + \"\"}\n                >\n                    <FormControlLabel value=\"1\" control={<Radio color={\"primary\"}/>} label=\"Diretor\"/>\n                    <FormControlLabel value=\"2\" control={<Radio color={\"primary\"}/>} label=\"Ator\"/>\n                </RadioGroup>\n                {\n                    errors.type && <FormHelperText id=\"type-helper-text\">{errors.type.message}</FormHelperText>\n                }\n            </FormControl>\n            <SubmitActions disabledButtons={loading} handleSave={() => trigger().then(isValid => {\n                 isValid && onSubmit(getValues(), null)\n            })}/>\n        </DefaultForm>\n    );\n};\n","/var/www/frontend/src/util/http/cast-member-http.ts",[],"/var/www/frontend/src/theme.ts",[],"/var/www/frontend/src/components/Badge.tsx",[],"/var/www/frontend/src/util/vendor/yup.ts",["171","172","173","174"],"import { setLocale } from 'yup'\n\nconst ptBR = {\n    mixed: {\n        required: '${path} é requerido'\n    },\n    string: {\n        max: '${path} precisa ter no máximo ${max} caracteres'\n    },\n    number: {\n        min: '${path} precisa ser no mínimo ${min}'\n    },\n    array: {\n        min: 'Em ${path}, precisa escolher pelo menos ${min} item'\n    }\n}\n\nsetLocale(ptBR)\n\nexport * from 'yup'\n","/var/www/frontend/src/components/SnackbarProvider.tsx",[],"/var/www/frontend/src/components/SubmitActions.tsx",[],"/var/www/frontend/src/components/DefaultForm.tsx",[],"/var/www/frontend/src/components/Table/index.tsx",[],"/var/www/frontend/src/components/Table/FilterResetButton.tsx",[],"/var/www/frontend/src/components/Table/DebouncedTableSearch.js",[],["175","176"],"/var/www/frontend/src/store/filter/index.ts",[],"/var/www/frontend/src/hooks/useFilter.ts",["177","178"],{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","severity":1,"message":"184","line":96,"column":8,"nodeType":"185","endLine":101,"endColumn":6,"suggestions":"186"},{"ruleId":"183","severity":1,"message":"187","line":97,"column":9,"nodeType":"188","endLine":97,"endColumn":67},{"ruleId":"183","severity":1,"message":"189","line":106,"column":8,"nodeType":"185","endLine":106,"endColumn":10,"suggestions":"190"},{"ruleId":"183","severity":1,"message":"189","line":101,"column":8,"nodeType":"185","endLine":101,"endColumn":10,"suggestions":"191"},{"ruleId":"183","severity":1,"message":"192","line":91,"column":8,"nodeType":"185","endLine":91,"endColumn":10,"suggestions":"193"},{"ruleId":"183","severity":1,"message":"192","line":108,"column":8,"nodeType":"185","endLine":108,"endColumn":10,"suggestions":"194"},{"ruleId":"183","severity":1,"message":"192","line":92,"column":8,"nodeType":"185","endLine":92,"endColumn":10,"suggestions":"195"},{"ruleId":"196","severity":1,"message":"197","line":5,"column":19,"nodeType":"198","messageId":"199","endLine":5,"endColumn":40},{"ruleId":"196","severity":1,"message":"197","line":8,"column":14,"nodeType":"198","messageId":"199","endLine":8,"endColumn":63},{"ruleId":"196","severity":1,"message":"197","line":11,"column":14,"nodeType":"198","messageId":"199","endLine":11,"endColumn":52},{"ruleId":"196","severity":1,"message":"197","line":14,"column":14,"nodeType":"198","messageId":"199","endLine":14,"endColumn":67},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"200","severity":1,"message":"201","line":4,"column":29,"nodeType":"202","messageId":"203","endLine":4,"endColumn":42},{"ruleId":"183","severity":1,"message":"204","line":40,"column":8,"nodeType":"185","endLine":40,"endColumn":10,"suggestions":"205"},"no-native-reassign",["206"],"no-negated-in-lhs",["207"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'filterManager' and 'getData'. Either include them or remove the dependency array.","ArrayExpression",["208"],"React Hook React.useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook React.useEffect has a missing dependency: 'snackbar'. Either include it or remove the dependency array.",["209"],["210"],"React Hook React.useEffect has missing dependencies: 'id', 'reset', and 'snackbar'. Either include them or remove the dependency array.",["211"],["212"],["213"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","@typescript-eslint/no-unused-vars","'INITIAL_STATE' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'filterManager'. Either include it or remove the dependency array.",["214"],"no-global-assign","no-unsafe-negation",{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"217","fix":"219"},{"desc":"220","fix":"221"},{"desc":"220","fix":"222"},{"desc":"220","fix":"223"},{"desc":"224","fix":"225"},"Update the dependencies array to be: [debouncedFilterState.pagination.page, debouncedFilterState.pagination.per_page, debouncedFilterState.order, filterManager, getData]",{"range":"226","text":"227"},"Update the dependencies array to be: [snackbar]",{"range":"228","text":"229"},{"range":"230","text":"229"},"Update the dependencies array to be: [id, reset, snackbar]",{"range":"231","text":"232"},{"range":"233","text":"232"},{"range":"234","text":"232"},"Update the dependencies array to be: [filterManager]",{"range":"235","text":"236"},[2893,3099],"[debouncedFilterState.pagination.page, debouncedFilterState.pagination.per_page, debouncedFilterState.order, filterManager, getData]",[3080,3082],"[snackbar]",[2834,2836],[2781,2783],"[id, reset, snackbar]",[3556,3558],[2865,2867],[1517,1519],"[filterManager]"]